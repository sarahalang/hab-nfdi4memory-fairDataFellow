# Code written by Sarah Lang with assistance of ChatGPT 4o
# Date: September 2024

import csv
import re

# Function to extract the signature and page number from the image link
def extract_signature_and_page(image_link):
    parts = image_link.split('/')
    signature = parts[-2]  # Signature example 'nd-779'
    image_file = parts[-1]  # Img file example '00099.jpg' but can contain letters like 'r00001.jpg'
    page_number_with_leading_zeroes = image_file.replace('.jpg', '')  # Page number is '00099'
    # Use regex to extract numeric part of page nr (in case of alphanumeric chars present)
    match = re.search(r'(\d+)', page_number_with_leading_zeroes)
    page_number_with_leading_zeroes = match.group(1) if match else '0'  # Default to '0' if no match found
    page_number = page_number_with_leading_zeroes.lstrip('0') # Page number is '99' afterwards
    return signature, page_number

# Function to process the CSV and generate a new output with the signature and pages
def process_csv(input_csv, output_csv):
    # Dictionary to track signatures and their associated pages
    signatures_pages = {}

    # Read the input CSV file
    with open(input_csv, mode='r', newline='', encoding='utf-8') as infile:
        reader = csv.DictReader(infile)

        # Prepare the output CSV file
        fieldnames = ['signature_link', 'signature', 'page_numbers_included', 'bibliographic_description', 'author', 'title',
                      'publishing_place', 'publisher', 'publication_year']
        with open(output_csv, mode='w', newline='', encoding='utf-8') as outfile:
            writer = csv.DictWriter(outfile, fieldnames=fieldnames) # , quoting=csv.QUOTE_ALL
            writer.writeheader()

            for row in reader:
                # Extract the image link, signature, and page number
                image_link = row['original_image_link']
                signature, page_number = extract_signature_and_page(image_link)


                # Track pages for each signature
                # Initialize new entry for signature with empty pages list & bibliographic info
                if signature not in signatures_pages:
                    signatures_pages[signature] = {
                        'pages': [int(page_number)],  #[int(page_number)]# Add the first page number immediately
                        'author': row.get('author', ''),
                        'title': row.get('title', ''),
                        'bibliographic_description': row.get('bibliographical_description'),
                        'publishing_place': row.get('publishing_place', ''),
                        'publisher': row.get('publisher', ''),
                        'publication_year': row.get('publication_year', '')
                    }
                else:
                    # Append the page number to the list of pages for the current signature
                    signatures_pages[signature]['pages'].append(int(page_number))


            # Write the data for each signature to the output CSV
            for signature, data in signatures_pages.items():
                signature_link = f"http://diglib.hab.de/drucke/{signature}/start.htm"
                # Sort pages numerically
                sorted_pages = ', '.join(map(str, sorted(data['pages'])))

                writer.writerow({
                    'signature_link': signature_link,
                    'signature': signature,
                    'page_numbers_included': sorted_pages,
                    'bibliographic_description': data['bibliographic_description'],
                    'author': data['author'],
                    'title': data['title'],
                    'publishing_place': data['publishing_place'],
                    'publisher': data['publisher'],
                    'publication_year': data['publication_year']
                })

# Run the script
input_csv = 'output_hab_imgs_metadata.csv'  # Input CSV generated by the previous script
output_csv = 'hab-dataset-img-metadata.csv'  # Output CSV to store the new data

process_csv(input_csv, output_csv)
